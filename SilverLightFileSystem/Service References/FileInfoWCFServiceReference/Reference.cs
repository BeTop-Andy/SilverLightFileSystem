//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace SilverLightFileSystem.FileInfoWCFServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="FileInfoWCFServiceReference.FileInfoWCFService")]
    public interface FileInfoWCFService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileInfoWCFService/DoWork", ReplyAction="urn:FileInfoWCFService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileInfoWCFService/Test", ReplyAction="urn:FileInfoWCFService/TestResponse")]
        System.IAsyncResult BeginTest(System.IO.FileInfo fi, System.AsyncCallback callback, object asyncState);
        
        int EndTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileInfoWCFService/AddFileToDB", ReplyAction="urn:FileInfoWCFService/AddFileToDBResponse")]
        System.IAsyncResult BeginAddFileToDB(int id, System.Nullable<int> pid, string fileName, long size, System.DateTime createTime, System.AsyncCallback callback, object asyncState);
        
        void EndAddFileToDB(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileInfoWCFService/AddDirToDB", ReplyAction="urn:FileInfoWCFService/AddDirToDBResponse")]
        System.IAsyncResult BeginAddDirToDB(int id, System.Nullable<int> pid, string dirName, long size, System.DateTime createTime, System.AsyncCallback callback, object asyncState);
        
        void EndAddDirToDB(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileInfoWCFService/GetStartId", ReplyAction="urn:FileInfoWCFService/GetStartIdResponse")]
        System.IAsyncResult BeginGetStartId(System.AsyncCallback callback, object asyncState);
        
        int EndGetStartId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileInfoWCFService/SetStartId", ReplyAction="urn:FileInfoWCFService/SetStartIdResponse")]
        System.IAsyncResult BeginSetStartId(int newId, System.AsyncCallback callback, object asyncState);
        
        void EndSetStartId(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FileInfoWCFService/Check_HasId", ReplyAction="urn:FileInfoWCFService/Check_HasIdResponse")]
        System.IAsyncResult BeginCheck_HasId(System.AsyncCallback callback, object asyncState);
        
        void EndCheck_HasId(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FileInfoWCFServiceChannel : SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStartIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStartIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileInfoWCFServiceClient : System.ServiceModel.ClientBase<SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService>, SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestDelegate;
        
        private EndOperationDelegate onEndTestDelegate;
        
        private System.Threading.SendOrPostCallback onTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFileToDBDelegate;
        
        private EndOperationDelegate onEndAddFileToDBDelegate;
        
        private System.Threading.SendOrPostCallback onAddFileToDBCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDirToDBDelegate;
        
        private EndOperationDelegate onEndAddDirToDBDelegate;
        
        private System.Threading.SendOrPostCallback onAddDirToDBCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStartIdDelegate;
        
        private EndOperationDelegate onEndGetStartIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetStartIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetStartIdDelegate;
        
        private EndOperationDelegate onEndSetStartIdDelegate;
        
        private System.Threading.SendOrPostCallback onSetStartIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheck_HasIdDelegate;
        
        private EndOperationDelegate onEndCheck_HasIdDelegate;
        
        private System.Threading.SendOrPostCallback onCheck_HasIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FileInfoWCFServiceClient() {
        }
        
        public FileInfoWCFServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileInfoWCFServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileInfoWCFServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileInfoWCFServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("无法设置 CookieContainer。请确保绑定包含 HttpCookieContainerBindingElement。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<TestCompletedEventArgs> TestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddFileToDBCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddDirToDBCompleted;
        
        public event System.EventHandler<GetStartIdCompletedEventArgs> GetStartIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetStartIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> Check_HasIdCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.BeginTest(System.IO.FileInfo fi, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTest(fi, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.EndTest(System.IAsyncResult result) {
            return base.Channel.EndTest(result);
        }
        
        private System.IAsyncResult OnBeginTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.IO.FileInfo fi = ((System.IO.FileInfo)(inValues[0]));
            return ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).BeginTest(fi, callback, asyncState);
        }
        
        private object[] OnEndTest(System.IAsyncResult result) {
            int retVal = ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).EndTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnTestCompleted(object state) {
            if ((this.TestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCompleted(this, new TestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestAsync(System.IO.FileInfo fi) {
            this.TestAsync(fi, null);
        }
        
        public void TestAsync(System.IO.FileInfo fi, object userState) {
            if ((this.onBeginTestDelegate == null)) {
                this.onBeginTestDelegate = new BeginOperationDelegate(this.OnBeginTest);
            }
            if ((this.onEndTestDelegate == null)) {
                this.onEndTestDelegate = new EndOperationDelegate(this.OnEndTest);
            }
            if ((this.onTestCompletedDelegate == null)) {
                this.onTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCompleted);
            }
            base.InvokeAsync(this.onBeginTestDelegate, new object[] {
                        fi}, this.onEndTestDelegate, this.onTestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.BeginAddFileToDB(int id, System.Nullable<int> pid, string fileName, long size, System.DateTime createTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFileToDB(id, pid, fileName, size, createTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.EndAddFileToDB(System.IAsyncResult result) {
            base.Channel.EndAddFileToDB(result);
        }
        
        private System.IAsyncResult OnBeginAddFileToDB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            System.Nullable<int> pid = ((System.Nullable<int>)(inValues[1]));
            string fileName = ((string)(inValues[2]));
            long size = ((long)(inValues[3]));
            System.DateTime createTime = ((System.DateTime)(inValues[4]));
            return ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).BeginAddFileToDB(id, pid, fileName, size, createTime, callback, asyncState);
        }
        
        private object[] OnEndAddFileToDB(System.IAsyncResult result) {
            ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).EndAddFileToDB(result);
            return null;
        }
        
        private void OnAddFileToDBCompleted(object state) {
            if ((this.AddFileToDBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFileToDBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFileToDBAsync(int id, System.Nullable<int> pid, string fileName, long size, System.DateTime createTime) {
            this.AddFileToDBAsync(id, pid, fileName, size, createTime, null);
        }
        
        public void AddFileToDBAsync(int id, System.Nullable<int> pid, string fileName, long size, System.DateTime createTime, object userState) {
            if ((this.onBeginAddFileToDBDelegate == null)) {
                this.onBeginAddFileToDBDelegate = new BeginOperationDelegate(this.OnBeginAddFileToDB);
            }
            if ((this.onEndAddFileToDBDelegate == null)) {
                this.onEndAddFileToDBDelegate = new EndOperationDelegate(this.OnEndAddFileToDB);
            }
            if ((this.onAddFileToDBCompletedDelegate == null)) {
                this.onAddFileToDBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFileToDBCompleted);
            }
            base.InvokeAsync(this.onBeginAddFileToDBDelegate, new object[] {
                        id,
                        pid,
                        fileName,
                        size,
                        createTime}, this.onEndAddFileToDBDelegate, this.onAddFileToDBCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.BeginAddDirToDB(int id, System.Nullable<int> pid, string dirName, long size, System.DateTime createTime, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddDirToDB(id, pid, dirName, size, createTime, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.EndAddDirToDB(System.IAsyncResult result) {
            base.Channel.EndAddDirToDB(result);
        }
        
        private System.IAsyncResult OnBeginAddDirToDB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id = ((int)(inValues[0]));
            System.Nullable<int> pid = ((System.Nullable<int>)(inValues[1]));
            string dirName = ((string)(inValues[2]));
            long size = ((long)(inValues[3]));
            System.DateTime createTime = ((System.DateTime)(inValues[4]));
            return ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).BeginAddDirToDB(id, pid, dirName, size, createTime, callback, asyncState);
        }
        
        private object[] OnEndAddDirToDB(System.IAsyncResult result) {
            ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).EndAddDirToDB(result);
            return null;
        }
        
        private void OnAddDirToDBCompleted(object state) {
            if ((this.AddDirToDBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddDirToDBCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddDirToDBAsync(int id, System.Nullable<int> pid, string dirName, long size, System.DateTime createTime) {
            this.AddDirToDBAsync(id, pid, dirName, size, createTime, null);
        }
        
        public void AddDirToDBAsync(int id, System.Nullable<int> pid, string dirName, long size, System.DateTime createTime, object userState) {
            if ((this.onBeginAddDirToDBDelegate == null)) {
                this.onBeginAddDirToDBDelegate = new BeginOperationDelegate(this.OnBeginAddDirToDB);
            }
            if ((this.onEndAddDirToDBDelegate == null)) {
                this.onEndAddDirToDBDelegate = new EndOperationDelegate(this.OnEndAddDirToDB);
            }
            if ((this.onAddDirToDBCompletedDelegate == null)) {
                this.onAddDirToDBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddDirToDBCompleted);
            }
            base.InvokeAsync(this.onBeginAddDirToDBDelegate, new object[] {
                        id,
                        pid,
                        dirName,
                        size,
                        createTime}, this.onEndAddDirToDBDelegate, this.onAddDirToDBCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.BeginGetStartId(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStartId(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.EndGetStartId(System.IAsyncResult result) {
            return base.Channel.EndGetStartId(result);
        }
        
        private System.IAsyncResult OnBeginGetStartId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).BeginGetStartId(callback, asyncState);
        }
        
        private object[] OnEndGetStartId(System.IAsyncResult result) {
            int retVal = ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).EndGetStartId(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStartIdCompleted(object state) {
            if ((this.GetStartIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStartIdCompleted(this, new GetStartIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStartIdAsync() {
            this.GetStartIdAsync(null);
        }
        
        public void GetStartIdAsync(object userState) {
            if ((this.onBeginGetStartIdDelegate == null)) {
                this.onBeginGetStartIdDelegate = new BeginOperationDelegate(this.OnBeginGetStartId);
            }
            if ((this.onEndGetStartIdDelegate == null)) {
                this.onEndGetStartIdDelegate = new EndOperationDelegate(this.OnEndGetStartId);
            }
            if ((this.onGetStartIdCompletedDelegate == null)) {
                this.onGetStartIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStartIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetStartIdDelegate, null, this.onEndGetStartIdDelegate, this.onGetStartIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.BeginSetStartId(int newId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetStartId(newId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.EndSetStartId(System.IAsyncResult result) {
            base.Channel.EndSetStartId(result);
        }
        
        private System.IAsyncResult OnBeginSetStartId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int newId = ((int)(inValues[0]));
            return ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).BeginSetStartId(newId, callback, asyncState);
        }
        
        private object[] OnEndSetStartId(System.IAsyncResult result) {
            ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).EndSetStartId(result);
            return null;
        }
        
        private void OnSetStartIdCompleted(object state) {
            if ((this.SetStartIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetStartIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetStartIdAsync(int newId) {
            this.SetStartIdAsync(newId, null);
        }
        
        public void SetStartIdAsync(int newId, object userState) {
            if ((this.onBeginSetStartIdDelegate == null)) {
                this.onBeginSetStartIdDelegate = new BeginOperationDelegate(this.OnBeginSetStartId);
            }
            if ((this.onEndSetStartIdDelegate == null)) {
                this.onEndSetStartIdDelegate = new EndOperationDelegate(this.OnEndSetStartId);
            }
            if ((this.onSetStartIdCompletedDelegate == null)) {
                this.onSetStartIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetStartIdCompleted);
            }
            base.InvokeAsync(this.onBeginSetStartIdDelegate, new object[] {
                        newId}, this.onEndSetStartIdDelegate, this.onSetStartIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.BeginCheck_HasId(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheck_HasId(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService.EndCheck_HasId(System.IAsyncResult result) {
            base.Channel.EndCheck_HasId(result);
        }
        
        private System.IAsyncResult OnBeginCheck_HasId(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).BeginCheck_HasId(callback, asyncState);
        }
        
        private object[] OnEndCheck_HasId(System.IAsyncResult result) {
            ((SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService)(this)).EndCheck_HasId(result);
            return null;
        }
        
        private void OnCheck_HasIdCompleted(object state) {
            if ((this.Check_HasIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Check_HasIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Check_HasIdAsync() {
            this.Check_HasIdAsync(null);
        }
        
        public void Check_HasIdAsync(object userState) {
            if ((this.onBeginCheck_HasIdDelegate == null)) {
                this.onBeginCheck_HasIdDelegate = new BeginOperationDelegate(this.OnBeginCheck_HasId);
            }
            if ((this.onEndCheck_HasIdDelegate == null)) {
                this.onEndCheck_HasIdDelegate = new EndOperationDelegate(this.OnEndCheck_HasId);
            }
            if ((this.onCheck_HasIdCompletedDelegate == null)) {
                this.onCheck_HasIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheck_HasIdCompleted);
            }
            base.InvokeAsync(this.onBeginCheck_HasIdDelegate, null, this.onEndCheck_HasIdDelegate, this.onCheck_HasIdCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService CreateChannel() {
            return new FileInfoWCFServiceClientChannel(this);
        }
        
        private class FileInfoWCFServiceClientChannel : ChannelBase<SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService>, SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService {
            
            public FileInfoWCFServiceClientChannel(System.ServiceModel.ClientBase<SilverLightFileSystem.FileInfoWCFServiceReference.FileInfoWCFService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginTest(System.IO.FileInfo fi, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fi;
                System.IAsyncResult _result = base.BeginInvoke("Test", _args, callback, asyncState);
                return _result;
            }
            
            public int EndTest(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Test", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddFileToDB(int id, System.Nullable<int> pid, string fileName, long size, System.DateTime createTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = id;
                _args[1] = pid;
                _args[2] = fileName;
                _args[3] = size;
                _args[4] = createTime;
                System.IAsyncResult _result = base.BeginInvoke("AddFileToDB", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddFileToDB(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddFileToDB", _args, result);
            }
            
            public System.IAsyncResult BeginAddDirToDB(int id, System.Nullable<int> pid, string dirName, long size, System.DateTime createTime, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = id;
                _args[1] = pid;
                _args[2] = dirName;
                _args[3] = size;
                _args[4] = createTime;
                System.IAsyncResult _result = base.BeginInvoke("AddDirToDB", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddDirToDB(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddDirToDB", _args, result);
            }
            
            public System.IAsyncResult BeginGetStartId(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetStartId", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetStartId(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetStartId", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetStartId(int newId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = newId;
                System.IAsyncResult _result = base.BeginInvoke("SetStartId", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetStartId(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetStartId", _args, result);
            }
            
            public System.IAsyncResult BeginCheck_HasId(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Check_HasId", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCheck_HasId(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Check_HasId", _args, result);
            }
        }
    }
}
